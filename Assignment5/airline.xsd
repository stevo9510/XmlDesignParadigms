<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
	<!-- Identifier: 10-character alphanumeric identifier.  Assumption is that this cannot start with a numeric character (since that is a restriction of the 	xs:ID type) -->	
	<xs:simpleType name="gufiType">
		<xs:restriction base="xs:ID">
			<xs:pattern value="[A-Za-z0-9]{10}"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- 3 Letter Airport Code.  Letters are accepted whether they are capital or not. -->
	<xs:simpleType name="airportCodeType">
		<xs:restriction base="xs:string">
			<xs:pattern value="[A-Za-z]{3}"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- String of 2-4 characters identifying the type of aircraft.  Single letter followed by 1-3 letters or digits.  Letters are accepted whether they are capital or not. -->
	<xs:simpleType name="aircraftCodeType">
		<xs:restriction base="xs:string">
			<xs:pattern value="[A-Za-z][A-Za-z0-9]{1,3}"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- 6 hex digits. Letters are accepted whether they are capital or not.  Hex is defined as base 16, accepting numbers 0-9 and letters A-F -->
	<xs:simpleType name="aircraftAddressType">
		<xs:restriction base="xs:string">
			<xs:pattern value="[A-Fa-f0-9]{6}"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- Could be H, J or Empty text (must be empty, and not whitespace). -->
	<xs:simpleType name="aircraftSizeType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="H"/>
			<xs:enumeration value="J"/>
			<xs:enumeration value=""/>
		</xs:restriction>
	</xs:simpleType>
	<!-- Represents an altitude in hundreds of feet.  Consists of a string with 2-3 digits.  Will reject a single digit number.  -->
	<xs:simpleType name="altitudeType">
		<xs:restriction base="xs:string">
			<xs:pattern value="\d{2,3}"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- Four-digit string representation of an octal number, or the value "FFFF".  Octal number is defined as base 8, accepting numbers of 0-7 only -->
	<xs:simpleType name="beaconCodeType">
		<xs:restriction base="xs:string">
			<xs:pattern value="[0-7]{4}|FFFF"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- Free form text between 1 and 3000 alphanumeric plus spaces.  
		No restrictions on what the user can enter as Free-Form means user can type pretty much whatever they want (https://english.stackexchange.com/a/161082).   
		New lines count toward the character count.  -->
	<xs:element name="comments">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:minLength value="1"/>
				<xs:maxLength value="3000"/>
				<xs:whiteSpace value="preserve"/>
				<!-- If this was not free form, and we wanted to restrict to only alpha numeric characters only, the minLength/maxLength/whitespace lines above can be removed with the following: -->
				<!--<xs:pattern value="[a-zA-Z0-9 ]{1,3000}"/>-->
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- 
		4 digit latitude (degrees minutes) plus optional N or S.  Latitude degrees is a number between 1-90.  Minutes is a number between 00-59. 
		The Format is in DDMM, but the MM portion is required to be two digits (so 05 for 5 minutes).  The Degrees portion (DD) could be a single-digit degree if applicable (cannot start with a 0).  
		This prevents ambiguity between what's degrees and minutes.  e.g. 513N would be ambiguous because you wouldn't know if it was 51 degrees 3 minutes vs. 5 degrees 13 minutes.
			
		If the degrees are 90, then there cannot be a minute value (it must be 00) since 90 degrees is the max.
	-->
	<xs:simpleType name="latitudeType">
		<xs:restriction base="xs:string">
			<xs:pattern value="([12345678]?\d[012345]\d|9000)[NS]?"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- 
		5 digit longitude (degrees minutes) plus optional E or W done.  Longitude degrees is a number between 1-180.  Minutes is a number between 00-59. 
		The Format is in DDDMM, but the MM portion is required to be two digits (so 05 for 5 minutes).  The Degrees portion (DDD) could be a single-digit or two-digit degree if applicable (cannot start with a 0).  
		This prevents ambiguity between what's degrees and minutes.  e.g. 513E would be ambiguous because you wouldn't know if it was 51 degrees 3 minutes vs. 5 degrees 13 minutes.
		
		If the degrees are 180, then there cannot be a minute value (it must be 00) since 180 degrees is the max.
	-->
	<xs:simpleType name="longitudeType">
		<xs:restriction base="xs:string">
			<xs:pattern value="(1[0-7]\d[012345]\d|\d?\d[012345]\d|18000)[EW]?"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- Number of persons on board; a number between 1 and 999 -->
	<xs:element name="personOnBoard">
		<xs:simpleType>
			<xs:restriction base="xs:integer">
				<xs:minInclusive value="1"/>
				<xs:maxInclusive value="999"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- A string of max length 1000 containing a valid protected segment. Valid characters are any letter (capital or not) or digit, plus '/', '+', '*', '.', ' ' (interpretted as a space, single quote omitted), and the overcast âŠ• symbol.  Single quotes are not permitted.  -->
	<xs:simpleType name="segmentType">
		<xs:restriction base="xs:string">
			<xs:pattern value="[A-Za-z\d \+ \* \. / &#8853;]{0,1000}"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- A value indicating the wake tubulence category of an aircraft.  Can be (L or M or H or J).  Cannot be empty.  Must be capital letter. -->
	<xs:simpleType name="categoryType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="L"/>
			<xs:enumeration value="M"/>
			<xs:enumeration value="H"/>
			<xs:enumeration value="J"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:element name="Message">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="GUFI" type="gufiType"/>
				<xs:element name="sourceAirport" type="airportCodeType"/>
				<xs:element name="destinationAirport" type="airportCodeType"/>
				<!-- Zulu Time in UTC/GMT.  Accepts whether there is a 'Z' character at the end or not, per answer by Professor.  -->
				<xs:element name="departureTime" type="xs:dateTime"/>
				<xs:element name="arrivalTime" type="xs:dateTime"/>
				<xs:element name="aircraftType" type="aircraftCodeType"/>
				<xs:element name="aircraftAddress" type="aircraftAddressType"/>
				<xs:element name="aircraftSize" type="aircraftSizeType"/>
				<xs:element name="altitude" type="altitudeType"/>
				<xs:element name="beaconCode" type="beaconCodeType"/>
				<xs:element ref="comments"/>
				<xs:element name="latitude" type="latitudeType"/>
				<xs:element name="longitude" type="longitudeType"/>
				<xs:element ref="personOnBoard"/>
				<xs:element name="segment" type="segmentType"/>
				<xs:element name="category" type="categoryType"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
</xs:schema>
